{"filter":false,"title":"users_signup_test.rb","tooltip":"/sample_app/test/integration/users_signup_test.rb","ace":{"folds":[],"scrolltop":382.5,"scrollleft":0,"selection":{"start":{"row":39,"column":46},"end":{"row":39,"column":46},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/ruby"}},"hash":"70fd705bb922292cacde1d5ffde480935fbc4275","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"remove","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","  end","  ","    test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","  ","end"],"id":19},{"start":{"row":0,"column":0},"end":{"row":29,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    follow_redirect!","    # assert_template 'users/show'","    # assert is_logged_in?","  end","end"]}],[{"start":{"row":26,"column":4},"end":{"row":26,"column":5},"action":"remove","lines":["#"],"id":20}],[{"start":{"row":26,"column":4},"end":{"row":26,"column":5},"action":"remove","lines":[" "],"id":21}],[{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"remove","lines":["#"],"id":22}],[{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"remove","lines":[" "],"id":23}],[{"start":{"row":26,"column":4},"end":{"row":26,"column":5},"action":"insert","lines":["#"],"id":24}],[{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"insert","lines":["#"],"id":25}],[{"start":{"row":0,"column":0},"end":{"row":29,"column":3},"action":"remove","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    follow_redirect!","    #assert_template 'users/show'","    #assert is_logged_in?","  end","end"],"id":26},{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  def setup","    ActionMailer::Base.deliveries.clear","  end","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information with account activation\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"remove","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  def setup","    ActionMailer::Base.deliveries.clear","  end","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information with account activation\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","end"],"id":32},{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  def setup","    ActionMailer::Base.deliveries.clear","  end","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, params: { user: { name:  \"\",","                                         email: \"user@invalid\",","                                         password:              \"foo\",","                                         password_confirmation: \"bar\" } }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information with account activation\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","end"]}]]},"timestamp":1480481845407}